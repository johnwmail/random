name: Container

on:
  push:
    tags: ["v*"]
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

permissions:
  contents: read
  security-events: write
  packages: write

jobs:
  build-and-publish:
    name: Build and Push Container
    runs-on: ubuntu-latest
    outputs:
      # Use the semantic version produced by docker/metadata-action so the verifier
      # pulls the tag that was actually pushed (e.g., 2.0, 2.0.1)
      image_tag: ${{ steps.meta.outputs.version }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up QEMU (for multi-arch builds)
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            ${{ github.ref_type == 'tag' && startsWith(github.ref_name, 'v') && 'type=raw,value=latest' || 'type=ref,event=branch' }}

      - name: Debug metadata outputs
        run: |
          echo "meta.tags=${{ steps.meta.outputs.tags }}"
          echo "meta.version=${{ steps.meta.outputs.version }}"
          echo "ref_type=${{ github.ref_type }} ref_name=${{ github.ref_name }}"

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: docker/Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            VERSION=${{ github.ref_name }}
            BUILD_TIME=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.created'] }}
            COMMIT_HASH=${{ github.sha }}

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.meta.outputs.version }}
          format: "sarif"
          output: "trivy-results.sarif"

      - name: Upload Trivy scan results to GitHub Security
        uses: github/codeql-action/upload-sarif@v3
        if: github.event_name != 'pull_request'
        with:
          sarif_file: "trivy-results.sarif"

  verify-runtime:
    runs-on: ubuntu-latest
    needs: build-and-publish
    permissions:
      contents: read
      packages: read
    env:
      # Use the tag/version produced by docker/metadata-action from the build job
      IMAGE: ghcr.io/${{ github.repository }}:${{ needs.build-and-publish.outputs.image_tag }}
    steps:
      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Pull published image (retry)
        run: |
          for i in {1..10}; do
            if docker pull "$IMAGE"; then exit 0; fi
            echo "Retrying docker pull... ($i)"; sleep 3
          done
          echo "Failed to pull $IMAGE" >&2; exit 1

      - name: Run container
        run: |
          docker rm -f app-under-test 2>/dev/null || true
          docker run -d --name app-under-test -p 8080:8080 "$IMAGE"

      - name: Health check
        run: |
          set -e
          for i in {1..15}; do
            if curl -fsS http://localhost:8080/ >/dev/null; then
              echo "Service is healthy"; exit 0
            fi
            sleep 1
          done
          echo "Service did not become healthy" >&2
          docker logs app-under-test || true
          exit 1

      - name: "Functional check: /json length validation"
        env:
          EXPECT_A_LEN: "18"
          EXPECT_P_LEN: "28"
          URL: "http://localhost:8080/json?a=$EXPECT_A_LEN&p=$EXPECT_P_LEN"
        run: |
          set -euo pipefail
          RESP=$(curl -fsS "$URL")
          echo "Response: $RESP"
          # Measure lengths of the returned strings
          A_LEN=$(echo "$RESP" | jq -r '.alphanumeric.string | length')
          P_LEN=$(echo "$RESP" | jq -r '.printable.string | length')
          echo "Computed lengths -> alphanumeric: $A_LEN, printable: $P_LEN"
          if [ "$A_LEN" != "$EXPECT_A_LEN" ]; then
            echo "Expected alphanumeric length $EXPECT_A_LEN, got $A_LEN" >&2
            exit 1
          fi
          if [ "$P_LEN" != "$EXPECT_P_LEN" ]; then
            echo "Expected printable length $EXPECT_P_LEN, got $P_LEN" >&2
            exit 1
          fi

      - name: Cleanup
        if: always()
        run: docker rm -f app-under-test || true
