name: Test

on:
  push:
    branches:
      - "main"
  pull_request:
    branches:
      - "main"
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read
  security-events: write
  actions: read

env:
  GO_BUILD_VERSION: "1.24" # Build version for lint/security

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest

    strategy:
      matrix:
        go-version: ["1.23", "1.24", "1.25"]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ matrix.go-version }}

      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ matrix.go-version }}-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-${{ matrix.go-version }}-

      - name: Download dependencies
        run: go mod download

      - name: Verify dependencies
        run: go mod verify

      - name: Run go vet
        run: go vet ./...

      - name: Run go fmt check
        run: |
          if [ "$(gofmt -s -l . | wc -l)" -gt 0 ]; then
            echo "The following files are not formatted:"
            gofmt -s -l .
            exit 1
          fi

      - name: Run tests
        run: go test -v -race -coverprofile=coverage.out ./...

      - name: Upload coverage reports to Codecov
        if: matrix.go-version == '1.25'
        uses: codecov/codecov-action@v5
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          file: ./coverage.out
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false

  lint:
    name: Lint
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_BUILD_VERSION }}

      - name: Prepare fresh Go caches
        id: go-cache-paths
        run: |
          echo "go-build=$(go env GOCACHE)" >> $GITHUB_OUTPUT
          echo "go-mod=$(go env GOMODCACHE)" >> $GITHUB_OUTPUT
          echo "Current working directory: $(pwd)"
          echo "Go version: $(go version)"
          echo "Go env: $(go env GOROOT GOPATH GOMODCACHE GOCACHE)"

      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: |
            ${{ steps.go-cache-paths.outputs.go-build }}
            ${{ steps.go-cache-paths.outputs.go-mod }}
          key: ${{ runner.os }}-go-${{ env.GO_BUILD_VERSION }}-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-${{ env.GO_BUILD_VERSION }}-

      - name: Download dependencies
        run: go mod download

      - name: Verify module
        run: |
          go mod verify
          go list -m all

      - name: Sanity build (exports)
        run: go build ./...

      - name: golangci-lint
        uses: golangci/golangci-lint-action@v8
        with:
          version: latest
          args: --timeout=5m --verbose --max-issues-per-linter=0 --max-same-issues=0

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
      actions: read

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_BUILD_VERSION }}

      - name: Run Gosec Security Scanner
        run: |
          go install github.com/securego/gosec/v2/cmd/gosec@latest
          gosec -no-fail -fmt sarif -out results.sarif ./...
          gosec -no-fail -fmt json -out results.json ./...

      - name: Upload SARIF file
        if: github.event_name == 'push' || github.event_name == 'pull_request'
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: results.sarif
        continue-on-error: true

      - name: Upload security scan results
        uses: actions/upload-artifact@v4
        with:
          name: security-scan-results
          path: |
            results.sarif
            results.json
          retention-days: 7

  build:
    name: Build
    runs-on: ubuntu-latest
    needs: [test, lint]

    strategy:
      matrix:
        go-version: ["1.23", "1.24", "1.25"]
        goos: [linux]
        goarch: [amd64, arm64]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ matrix.go-version }}

      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ matrix.go-version }}-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-${{ matrix.go-version }}-

      - name: Build binary
        env:
          GOOS: ${{ matrix.goos }}
          GOARCH: ${{ matrix.goarch }}
          CGO_ENABLED: 0
        run: |
          BINARY_NAME=random

          VERSION=${GITHUB_REF#refs/tags/}
          if [[ $VERSION == refs/* ]]; then
            VERSION="dev-${GITHUB_SHA:0:7}"
          fi

          echo "Building for $GOOS/$GOARCH..."
          go build -v \
            -ldflags="-s -w -X main.Version=${VERSION} -X main.BuildTime=$(date -u +%Y-%m-%dT%H:%M:%SZ) -X main.CommitHash=${GITHUB_SHA:0:7}" \
            -o "dist/${BINARY_NAME}_${GOOS}_${GOARCH}" \
            .

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: random-${{ matrix.goos }}-${{ matrix.goarch }}-go${{ matrix.go-version }}
          path: dist/
          retention-days: 7

  smoke-test:
    name: Smoke Test
    runs-on: ubuntu-latest
    needs: [build]

    steps:
      - name: Download linux-amd64 artifact
        uses: actions/download-artifact@v4
        with:
          name: random-linux-amd64-go1.24
          path: dist/

      - name: Run smoke test
        env:
          EXPECT_A_LEN: "38"
          EXPECT_P_LEN: "48"
        run: |
          set -euo pipefail
          URL="http://localhost:8080/json?a=$EXPECT_A_LEN&p=$EXPECT_P_LEN"

          chmod +x dist/random_linux_amd64

          echo "Starting binary: dist/random_linux_amd64"
          nohup ./dist/random_linux_amd64 > server.log 2>&1 &
          PID=$!
          echo "server pid=$PID"

          # Wait for server to start (max 15s)
          for i in {1..15}; do
            if curl -sSf "http://localhost:8080/json" > /dev/null 2>&1; then
              echo "server is responding"
              break
            fi
            if [ $i -eq 15 ]; then
              echo "Server failed to start"
              cat server.log
              exit 1
            fi
            sleep 1
          done

          # Smoke test the /json endpoint
          RESP=$(curl -fsS "$URL")
          echo "Response: $RESP"

          # Measure lengths of the returned strings
          A_LEN=$(echo "$RESP" | jq -r '.alphanumeric.string | length')
          P_LEN=$(echo "$RESP" | jq -r '.printable.string | length')

          echo "Computed lengths -> alphanumeric: $A_LEN, printable: $P_LEN"
          if [ "$A_LEN" != "$EXPECT_A_LEN" ]; then
            echo "Expected alphanumeric length $EXPECT_A_LEN, got $A_LEN" >&2
            exit 1
          fi
          if [ "$P_LEN" != "$EXPECT_P_LEN" ]; then
            echo "Expected printable length $EXPECT_P_LEN, got $P_LEN" >&2
            exit 1
          fi

          # Kill server
          kill $PID || true
          sleep 1
