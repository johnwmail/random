name: Build and Publish Docker Image

on:
  push:
    tags:
      - 'v*'

jobs:
  build-and-publish:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    outputs:
      image: ghcr.io/${{ github.repository }}:${{ github.ref_name }}
    steps:
      - uses: actions/checkout@v4
      - uses: docker/setup-qemu-action@v3
      - uses: docker/setup-buildx-action@v3
      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: .
          file: docker/Dockerfile
          push: true
          build-args: |
            VERSION=${{ github.ref_name }}
          tags: |
            ghcr.io/${{ github.repository }}:${{ github.ref_name }}
            ghcr.io/${{ github.repository }}:latest
          platforms: linux/amd64,linux/arm64

  verify-runtime:
    runs-on: ubuntu-latest
    needs: build-and-publish
    permissions:
      contents: read
      packages: read
    env:
      IMAGE: ghcr.io/${{ github.repository }}:${{ github.ref_name }}
    steps:
      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Pull published image (retry)
        run: |
          for i in {1..10}; do
            if docker pull "$IMAGE"; then exit 0; fi
            echo "Retrying docker pull... ($i)"; sleep 3
          done
          echo "Failed to pull $IMAGE" >&2; exit 1

      - name: Run container
        run: |
          docker rm -f app-under-test 2>/dev/null || true
          docker run -d --name app-under-test -p 8080:8080 "$IMAGE"

      - name: Health check
        run: |
          set -e
          for i in {1..30}; do
            if curl -fsS http://localhost:8080/ >/dev/null; then
              echo "Service is healthy"; exit 0
            fi
            sleep 2
          done
          echo "Service did not become healthy" >&2
          docker logs app-under-test || true
          exit 1

      - name: Install jq
        run: sudo apt-get update -y && sudo apt-get install -y jq

      - name: "Functional check: /json length validation"
        env:
          URL: "http://localhost:8080/json?a=22&p=33"
          EXPECT_A_LEN: "22"
          EXPECT_P_LEN: "33"
        run: |
          set -euo pipefail
          RESP=$(curl -fsS "$URL")
          echo "Response: $RESP"
          # Measure lengths of the returned strings
          A_LEN=$(echo "$RESP" | jq -r '.alphanumeric.string | length')
          P_LEN=$(echo "$RESP" | jq -r '.printable.string | length')
          echo "Computed lengths -> alphanumeric: $A_LEN, printable: $P_LEN"
          if [ "$A_LEN" != "$EXPECT_A_LEN" ]; then
            echo "Expected alphanumeric length $EXPECT_A_LEN, got $A_LEN" >&2
            exit 1
          fi
          if [ "$P_LEN" != "$EXPECT_P_LEN" ]; then
            echo "Expected printable length $EXPECT_P_LEN, got $P_LEN" >&2
            exit 1
          fi

      - name: Cleanup
        if: always()
        run: docker rm -f app-under-test || true
